#!/usr/bin/env node

var USAGE = 'USAGE: npm <start|stop>';

if(process.argv.length < 3) {
    console.error('No startup arguments provided');
    console.error(USAGE);
    process.exit(1);
}

/**
 * Module dependencies.
 */

var fs = require('fs');
var child_process = require('child_process');
var path = require('path');
var Prompt = require('prompt');
var nodemailer = require('nodemailer');

if(process.argv[2] === 'start') {
    // Make sure server isn't already running
    fs.access('node.pid', fs.F_OK, function(err) {
        if(!err) {
            console.log('Server is already running:\n');
            fs.readFile('node.pid', 'utf8', function(readErr, data) {
                if(readErr) {
                    process.exit();
                }

                if(data) {
                    var psCmd = child_process.spawn('ps', ['u', '-p', data.trim()], {
                        stdio: [
                            'inherit', // inherit STDIN
                            'inherit', // inherit STDOUT
                            'inherit'  // inherit STDERR
                        ]
                    });
                    psCmd.on('exit', process.exit);
                }
            });

        } else {
            // Server is not running
            // Make sure the logs directory exists
            fs.stat('logs', function(statErr, stats) {
                if(statErr) {
                    // Directory doesn't exist
                    fs.mkdir('logs', function() {
                        console.log('Created logs directory');
                        getGmailCredentials();
                    });

                } else {
                    if(stats.isDirectory()) {
                        getGmailCredentials();

                    } else {
                        console.error('\'logs\' exists but is not a directory');
                        console.error('Unable to start server');
                        process.exit(1);
                    }
                }
            });
        }
    });

} else if(process.argv[2] === 'stop') {
    fs.access('node.pid', fs.F_OK, function(err) {
        if(err) {
            console.log('Server does not appear to be running');
            process.exit();
        }

        fs.readFile('node.pid', 'utf8', function(readErr, data) {
            if(readErr) {
                console.error('Problems reading node.pid:');
                console.error(readErr);
                process.exit(1);
            }

            console.log('Stopping server...');

            var killCmd = child_process.spawn('kill', ['-15', data.trim()]);
            killCmd.on('error', function(killErr) {
                console.error('Problem killing running server process:');
                console.error(err);
            });
            killCmd.on('exit', function(code, signal) {
                if(code === 0) {
                    console.log('Server stopped successfully');
                } else {
                    console.error('Unable to stop server (${code})');
                    if(signal) {
                        console.error('(caused by ${signal})');
                    }

                    process.exit(1);
                }
            });
        });
    });

} else {
    console.error('Unrecognized startup argument: ' + process.argv[2]);
    console.error(USAGE);
    process.exit(1);
}

function getGmailCredentials(ignoreAuthFile) {
    // Check for a .gmail.auth file; if it exists, use that
    fs.stat('.gmail.auth', function(statErr, stats) {
        if(!statErr && stats.isFile() && !ignoreAuthFile) {
            console.log('.gmail.auth file found');

            var gmailCreds = fs.readFileSync('.gmail.auth');
            sendServerStartEmail(gmailCreds, function(succeeded) {
                if(succeeded) {
                    startDaemon(gmailCreds);

                } else {
                    Prompt.start();

                    console.log('Credentials stored in .gmail.auth file are not valid. Can this file be deleted? [y/N]');
                    Prompt.get(['response'], function(err, result) {
                        if(err) {
                            console.error(err);

                        } else {
                            if(/^y(es)?/i.test(result.response)) {
                                fs.unlinkSync('.gmail.auth');
                                console.log('.gmail.auth deleted');
                            }

                            // Start over
                            getGmailCredentials(true);
                        }
                    });
                }
            });

        } else {
            // Prompt for credentials
            Prompt.start();

            var promptOptions = {
                properties: {
                    email: {
                        pattern: /@gmail\.com$/,
                        message: 'Only supports Gmail right now',
                        required: true
                    },
                    password: {
                        hidden: true,
                        required: true
                    }
                }
            };

            console.log('Note: only Gmail addresses are supported at this time.\n\nIf your Gmail account has 2-factor authentication enabled, generate an application-specific token and use that as the password\n\nSee https://security.google.com/settings/security/apppasswords');

            Prompt.get(promptOptions, function(err, result) {
                if(err) {
                    console.error(err);

                } else {
                    sendServerStartEmail([result.email, result.password].join(':'), function(succeeded) {
                        if(succeeded) {
                            // Offer to cache credentials (in .gmail.auth)
                            console.log('Save credentials (will be used automatically at server startup in the future)? [y/N]');
                            Prompt.get(['response'], function(responseErr, response) {
                                if(responseErr) {
                                    console.error(responseErr);

                                } else {
                                    if(/^y(es)?/i.test(response.response)) {
                                        // Save the file
                                        fs.writeFileSync(path.join(__dirname, '..', '.gmail.auth'), [result.email, result.password].join(':'), {flag: 'wx'});

                                        console.log('Saving credentials');
                                    }

                                    startDaemon([result.email, result.password].join(':'));
                                }
                            });

                        } else {
                            // Start over
                            getGmailCredentials();
                        }
                    });
                }
            });
        }
    });
}

function sendServerStartEmail(creds, cb) {
    var transporter = nodemailer.createTransport('smtps://' + creds + '@smtp.gmail.com');

    var mailOptions = {
        from: process.env.npm_package_name + ' <startup@node.local>',
        to: String(creds).split(':')[0],
        subject: 'Server starting, email verified',
        html: '<h1>' + process.env.npm_package_name + '</h1><p>Server starting, email has been successfully authenticated</p>'
    };

    transporter.sendMail(mailOptions, function(sendErr, info) {
        if(sendErr) {
            console.error('Error sending server start email:');
            console.error(sendErr);

            cb(false);

        } else {
            console.log('Credentials verified, server start email successfully sent');
            cb(true);
        }
    });
}

function startDaemon(emailAuth) {
    var daemon = child_process.spawn('node', ['bin/www', emailAuth], {
        detached: true,
        stdio: [
            'ignore',                          // ignore STDIN
            fs.openSync('logs/node.log', 'a'), // send STDOUT to logs/node.log
            fs.openSync('logs/node.err', 'a')  // send STDERR to logs/node.err
        ]
    });

    daemon.unref();

    console.log('Server daemon started, run \'ps u -p `cat node.pid`\' to see the daemon process');
    process.exit();
}
