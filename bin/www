#!/usr/bin/env node

// Verify that email and password were passed as arguments
// Process call should be:
// node ./bin/www <email:password>
if(process.argv.length < 3) {
    console.error('Not enough arguments to start (expecting email:password string)');
    process.exit(1);
}

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('psychic-disco:server');
var http = require('http');
var nodemailer = require('nodemailer');
var os = require('os');

var WebSocketServer = require('ws').Server;

// Set process title (masks the email/password inputs)
process.title = 'node [' + process.env.npm_package_name + ']';

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Set up email transport
app.email = {
    transport: nodemailer.createTransport('smtps://' + process.argv[2] + '@smtp.gmail.com')
};


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Register app message handlers
app.msgHandlers = require('../wsMsgHandlers');

// Create a WebSocket server
app.wss = new WebSocketServer({server: server});

app.wss.on('connection', function(ws) {
    console.log('New WebSocket connection established');

    ws.on('message', function(msg) {
        // Note: expecting all messages to be JSON-formatted
        var msgObj = JSON.parse(msg);

        if(msgObj.type) {
            // If a message handler for this message type exists
            if(app.msgHandlers[msgObj.type]) {
                app.msgHandlers[msgObj.type](msgObj, ws);

            // Otherwise, use the default handler
            } else {
                app.msgHandlers.DefaultHandler(msgObj, ws);
            }

        } else {
            console.log('Unable to process message, no type specified:');
            console.log(msg);
        }
    });
});

app.wss.broadcast = function(msg) {
    app.wss.clients.forEach(function(client) {
        client.send(msg);
    });
};

console.log('Server started, listening at http://' + [os.hostname(), port].join(':'));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
